// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Cube
{
    float3 position;
    float4 color;
};

float hash(float2 p);
float3 hash3(int3 x);
const uint k = 1103515245U;  // GLIB C

RWStructuredBuffer<Cube> cubes;
float timeOffset;
int numCubesX;
int numCubesY;
int iterations;

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    for (int i = 0; i < iterations; i++)
    {
        Cube cube = cubes[id.y * numCubesX + id.x];
        //Create 3 random floats 0 to 1.0f
        float4 col;
        //float3 temp = hash3(int3(id.x, id.y, int(timeOffset)));
        //col.x = temp.x;
        //col.y = temp.y;
        //col.z = temp.z;
        // 
        col.x = hash(id.x * timeOffset + id.y * timeOffset);
        col.y = hash(id.x * timeOffset + id.z * timeOffset);
        col.z = hash(id.y * timeOffset + id.z * timeOffset);
        col.w = 1.0f;
        cube.color = col;

        cubes[id.y * numCubesX + id.x] = cube;
    }
}

float hash(float2 p)
{
    return frac(sin(dot(p, float2(12.9898, 78.233))) * 43758.5453);
}

float3 hash3(int3 x)
{
    x = ((x >> 8U) ^ x.yzx) * k;
    return float3(x);
    x = ((x >> 8U) ^ x.yzx) * k;
    x = ((x >> 8U) ^ x.yzx) * k;

    return float3(x);

    return float3(x) *(1.0 / float(0xffffffffU));
}